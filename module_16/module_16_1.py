# module 16_1 Основы Fast Api и маршрутизация

'''
Задача "Начало пути":
Подготовка:
Установите фреймворк FastAPI при помощи пакетного менеджера pip. Версию Python можете выбрать самостоятельно (3.9 - 3.12).

Маршрутизация:

    Создайте приложение(объект) FastAPI предварительно импортировав класс для него.

2.Создайте маршрут к главной странице - "/". По нему должно выводиться сообщение "Главная страница".
3.Создайте маршрут к странице администратора - "/user/admin". По нему должно выводиться сообщение "Вы вошли как администратор".
4.Создайте маршрут к страницам пользователей используя параметр в пути - "/user/{user_id}". По нему должно выводиться сообщение "Вы вошли как пользователь № <user_id>".
5.Создайте маршрут к страницам пользователей передавая данные в адресной строке - "/user". По нему должно выводиться сообщение "Информация о пользователе. Имя: <username>, Возраст: <age>".
Пример получившегося интерфейса Swagger:


Примечания:

    Все маршруты пишутся при мощи GET запроса.
    Помните о важности порядка записи запросов в вашем файле.
    Названия функций можете придумать самостоятельно с учётом логики прописанной в них.

Файл module_16_1.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
'''

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Главная страница"}

@app.get("/user/admin")
async def read_admin():
    return {"message": "Вы вошли как администратор"}

@app.get("/user/{user_id}")
async def read_user(user_id: int):
    return {"message": f"Вы вошли как пользователь № {user_id}"}

@app.get("/user")
async def read_user_info(username: str, age: int):
    return {"message": f"Информация о пользователе. Имя: {username}, Возраст: {age}"}
