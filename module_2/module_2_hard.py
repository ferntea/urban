# module_2_hard Дополнительное практическое задание по модулю*

'''
Задание "Слишком древний шифр":
Вы отправились в путешествие на необитаемый остров и конечно же в очередной вылазке в джунгли вы попали в ловушку
местному племени (да-да, классика "Индиана Джонса").
К вашему удивлению, в племени были неплохие математики и по совместительству фантазёры.
Вы поняли это, когда после долгих блужданий перед вами появились ворота (выход из ловушки) с двумя каменными вставками
для чисел.
В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.

К вашему счастью рядом с менее успешными и уже неговорящими путешественниками находился папирус, где были написаны
правила для решения этого "ребуса". (Как жаль, что они поняли это так поздно :( ).

Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно
(делилось без остатка) сумме их значений.

Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала
нужный пароль result, для одного введённого числа.
'''

def find_pairs(n):
    result = []
    for i in range(1, n):  # 1st number
        for j in range(i, n):  # 2nd number
            if (i + j) % n == 0:
                result.append([i, j])
    return result

n = int(input("Введите число от 3 до 20: "))
print("вставка 1  -  вставка 2")
print(f"    {n}         ", end='')
if 3 <= n <= 20:
    password = find_pairs(n)
    for pair in password:
        print("".join(str(num) for num in pair), end='')
else:
    print("Out of range 3 - 20.")
